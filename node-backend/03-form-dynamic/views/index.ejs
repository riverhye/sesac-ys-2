<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 form 전송</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</head>
<body>
    <form name="register">
        <input type="text" name="id" value="heyyy" placeholder="ID" pattern="^[a-z0-9]{5,}$" title="소문자 숫자 포함 5자 이상" />
        <input type="password" name="pw" value="1234" placeholder="Password" />
        <input type="text" name="name" value="username" placeholder="Name" required />
        <button type="button" onclick="ajaxGet()">ajax get 전송</button>
        <button type="button" onclick="ajaxPost()">ajax post 전송</button>
        <button type="button" onclick="axiosGet()">axios get 전송</button>
        <button type="button" onclick="axiosPost()">axios post 전송</button>
        <button type="button" onclick="fetchGet()">fetch get 전송</button>
        <button type="button" onclick="fetchPost()">fetch post 전송</button>
        <!-- 일반(동기) 폼 전송 시 button type=submit -->
    </form>
    <h3 id="result"></h3>

    <script>
        function getData(){
            const form = document.forms["register"]

            if(!form.checkValidity()) { // .checkValidity() : 폼의 유효성을 검사해 boolean 값 반환
                form.reportValidity() // .reportValidity() : 유효성 검사 통과 못한 input report'만' 함
                return // 함수는 return 만나면 바로 종료 (return false로 써도 됨)
            }

            const data = {
                    id: form.id.value,
                    pw: form.pw.value,
                    name: form.name.value
            }

            return data
        }

        function ajaxGet(){
            const form = document.forms["register"]
            // console.dir(form)
            // // input의 name으로 객체 접근해서 가져온다
            // console.log(form.id)
            // console.log(form.id.value);

            const data = getData();
            if(!data) return;

            $.ajax({
                // 아래 3줄로 전송
                type: "get", // form 속성 중 method
                url: "/ajax",
                // get 요청만 query 개념이 존재하기에 아래처럼 url 변경이 가능하다
                // url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`, // form 속성 중 action
                data: data,

                // 응답을 성공적으로 받아왔을 때 이벤트 핸들러 (프로미스 못 씀)
                success: function(result) {
                    console.log(result)
                    $("#result").html(`ajax get 요청 성공! ${result.name}님 안녕하세요.`)
                } 
            })
        }

        function ajaxPost(){
            const form = document.forms["register"]
            const data = getData()
            // getData()의 반환값은 false(return 만나면) or object(끝까지 통과하면 data return 하니까)
            if(!data) return;

            $.ajax({
                // 아래 3줄로 전송
                type: "post",
                url: "/ajax", 
                data: data,

                success: function(result) {
                    // 객체 구조분해
                    const {name, id} = result
                    console.log(result)
                    $("#result").html(`ajax post 요청 성공! ${name}님 안녕하세요.`)
                } 
            })
        }

        function axiosGet(){
            const data = getData()
            // getData()의 반환값은 false(return 만나면) or object(끝까지 통과하면 data return 하니까)
            if(!data) return;

            // axios 객체는 promise 객체를 리턴한다. 그래서 then 등 사용 가능.
            axios({
                method: 'get',
                url: '/axios',
                // params 대신 url에 쿼리 직접 작성해도 됨.
                params: data // 요청에 포함할 데이터(get 요청에서는 params)
            }).then((res)=>{
                // 서버(index.js)에서 보내준 응답이 res에 담김.
                console.log(res)
                console.log(res.data)

                const {id, name} = result
                $("#result").html(`axios get 요청 성공! ${name}님 안녕하세요.`)
            })
        }

        async function axiosPost(){
            const data = getData()
            const res = await axios({
                method: 'post',
                url: '/axios',
                data: data
            })
            
            // 서버의 데이터를 받아 클라이언트 콘솔에 보여줌
            console.log(res.data)
            const {name} = res.data // promise 객체를 반환하므로 객체의 data로 접근해줘야 함
            $("#result").html(`axios Post 성공 ! 안녕하세요 ${name}님`)
            
        }

        //async function axiosPost(){
        //    const data = getData()
        // getData()의 반환값은 false(return 만나면) or object(끝까지 통과하면 data return 하니까)
        //    if(!data) return;
            //axios({
            //    method: 'post',
            //    url: '/axios',
            //    data: data
            //}).then((res)=>{
            //    console.log(res.data)
            //   const {name} = res.data
            //    $("#result").html(`axios get 요청 성공! ${name}님 안녕하세요.`)    
            //})

        //    console.log(res)
        //    $("#result").html(`axios get 요청 성공! ${res.data.name}님 안녕하세요.`)

        //}
    
        async function fetchGet(){
            const data = getData();
            if(!data) return;

            // fetch(url, option 객체)
            // 여기는 요청 부분
            // url은 form의 action. 즉 요청을 전송할 서버 주소.
            // option 객체에 method가 있음. get이 default라서 안 써도 됨.
            // get 요청 시 데이터를 반드시 query로 만들어 url과 함께 전송해야 한다.

            // 쿼리 만들기
            // const urlQuery = `id=${data.id}&pw=${data.pw}&name=${data.pw}`
            const urlQuery = new URLSearchParams(data).toString()

        // [1] then chaining
            // fetch(`/fetch?${urlQuery}`)
            //   .then( (res)=>{
            //     // then부터는 응답 처리 부분
            //     // 응답을 파싱해야 해서 .json(), .text() 등이 있다.
            //     // json() 메서드를 이용해서 parsing 해야 함
            //     // 근데 요 메서드는 promise 기반이라서 파싱하기까지 시간이 걸림
            //     return res.json()
            // }).then((res)=>{
            //     // 여기 res는 서버에서 응답한 객체..?
            //         console.log(res);
            // })
        

        // [2] promise async(half)
        // fetch(`/fetch?${urlQuery}`)
        //       .then( async (res)=>{
        //         console.log("origin", res);
        //         console.log("parsing", await res.json());
        //     })

        // [3] async await
        // const originRes = await fetch(`/fetch?${urlQuery}`)
        // const res = await originRes.json()
        // console.log(res)

        }

        function fetchPost(){
            const data = getData()
            if(!data) return;

            // 여태 기본값인 application/x-www-form-urlencoded
            // BUT fetch post 요청할 땐 기본값 사용 시 동작 ㄴㄴ
            // countent-type을 application/json 형태로 변경
            fetch("/fetch", {
                method: "POST",
                headers: {
                    // key에 특수문자 있음 문자열로 묶으삼
                    // json으로 받게 형식을 변경
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data) // stringify 함수로 json 바꿔주기
            }).then((res)=>{
                return res.json()
            }).then((res)=>{
                console.log(res)
                $("#result").html(`fetch post 요청 성공 ! ${res.name}님 안녕`)
            })
        }

    </script>
</body>
</html>